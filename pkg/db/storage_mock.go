// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shirolimit/wallet-service/pkg/db (interfaces: Storage)

// Package db is a generated GoMock package.
package db

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "github.com/shirolimit/wallet-service/pkg/entities"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockStorage) CreateAccount(arg0 context.Context, arg1 entities.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockStorageMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStorage)(nil).CreateAccount), arg0, arg1)
}

// CreatePayment mocks base method
func (m *MockStorage) CreatePayment(arg0 context.Context, arg1 entities.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment
func (mr *MockStorageMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStorage)(nil).CreatePayment), arg0, arg1)
}

// GetAccount mocks base method
func (m *MockStorage) GetAccount(arg0 context.Context, arg1 entities.AccountID) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockStorageMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStorage)(nil).GetAccount), arg0, arg1)
}

// ListAccounts mocks base method
func (m *MockStorage) ListAccounts(arg0 context.Context) ([]entities.AccountID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0)
	ret0, _ := ret[0].([]entities.AccountID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts
func (mr *MockStorageMockRecorder) ListAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockStorage)(nil).ListAccounts), arg0)
}

// PaymentsByAccount mocks base method
func (m *MockStorage) PaymentsByAccount(arg0 context.Context, arg1 entities.AccountID) ([]entities.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentsByAccount", arg0, arg1)
	ret0, _ := ret[0].([]entities.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentsByAccount indicates an expected call of PaymentsByAccount
func (mr *MockStorageMockRecorder) PaymentsByAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentsByAccount", reflect.TypeOf((*MockStorage)(nil).PaymentsByAccount), arg0, arg1)
}
